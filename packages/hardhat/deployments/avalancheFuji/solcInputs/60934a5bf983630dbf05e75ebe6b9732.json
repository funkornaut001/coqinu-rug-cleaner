{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/CoqInuRuqCleaner.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n// import \"@openzeppelin/contracts/utils/Context.sol\"; --not sure I need context for this contract, this is actually pulled in from Pausable\n\n// Layout of Contract:\n// version\n// imports\n// errors\n// interfaces, libraries, contracts\n// Type declarations\n// State variables\n// Events\n// Modifiers\n// Functions\n\n// Layout of Functions:\n// constructor\n// receive function (if exists)\n// fallback function (if exists)\n// external\n// public\n// internal\n// private\n// internal & private view & pure functions\n// external & public view & pure functions\n/**\n * @title TaxLossHarvester\n * @author Trevor Foster\n * @notice This smart contract is designed to facilitate tax loss harvesting for holders of ERC721, ERC1155, and ERC20 tokens. \n * The primary objective of this contract is to allow users to realize losses on their digital assets for tax purposes, \n * in a compliant and automated manner. The contract is programmed to receive NFTs and ERC20 tokens from users. \n * Upon receipt of the digital asset, the smart contract automatically returns a nominal amount of money to the user. \n * This transaction is designed to establish a 'sale' or exchange event, thereby enabling the user to realize a capital loss on the asset.\n * The contract does not compute the loss value; users must calculate this based on their acquisition cost and the amount \n * received from the smart contract. This loss can then potentially be used to offset capital gains in other areas, \n * subject to the tax laws in the user's jurisdiction. \n * \n * This contract is intended for users who have a clear understanding of tax loss harvesting and its implications. \n * It is advisable to consult with a tax professional before engaging in transactions intended for tax loss harvesting purposes.\n */\n\ncontract CoqInuRugCleaner is Ownable, Pausable, ReentrancyGuard {\n\n    ////////////// \n    /// ERRORS ///\n    //////////////\n\n    error NoZeroAddress();\n    error ArrayMismatchLengths();\n    error CantBeZero(uint256);\n    error InsufficientBalance(uint256, uint256);\n    error ContractUnderFunded();\n    error Denied();\n    error UserNeedsMoreCoqInThem();\n    error SameOwner(address);\n    error OwnableInvalidOwner(address);\n\n    ///////////////////////\n    /// State Variables ///\n    ///////////////////////\n\n    address public immutable i_coq; //0x420FcA0121DC28039145009570975747295f2329; // Coq Token\n\n    /// @notice The amount of COQ that the contract will pay to the user for each NFT or ERC20 token received\n    uint256 public tokenPaymentAmount = 1000000000000000000000000 wei; // 1,000,000 coq\n    \n    /// @notice The amount of AVAX that the contract will charge the user for each NFT or ERC20 token sent to it\n    uint256 public serviceFee = 2000000000000000000000000 wei; // 2,000,000 coq\n\n    /// @notice The address that will receive the service fee\n    address public roosterWallet; \n\n    ///@notice blacklist of addresses that cannot use the contract\n    mapping(address => bool) public deniedList;\n\n\n    //////////////\n    /// EVENTS ///\n    //////////////\n    // Settings Events\n    event roosterWalletChanged(address oldAddress, address newAddress);\n    event ServiceFeeChanged(uint256 oldServiceFee, uint256 newServiceFee);\n    event TokenPaymentAmountChanged(uint256 oldTokenPaymentAmount, uint256 newTokenPaymentAmount);\n    event AVAXWithdrawn(address indexed user, uint256 amount);\n\n    // Harvest Events\n    event HarvestedERC20(address indexed user, address indexed token, uint256 amount);\n    event HarvestedERC721(address indexed user, address indexed token, uint256 tokenId);\n    event HarvestedERC1155(address indexed user, address indexed token, uint256 tokenId, uint256 amount);\n    event HarvestedERC1155s(address indexed user, address[] tokens, uint256[] tokenIds, uint256[] amounts);\n    event HarvestedERC721s(address indexed user, address[] tokens, uint256[] tokenIds);\n    event HarvestedMultiERC20(address indexed user, address[] tokens, uint256[] amounts);\n\n    // Withdraw Events\n    event ERC20Withdrawn(address indexed user, address indexed token, uint256 amount);\n    event ERC721Withdrawn(address indexed user, address indexed token, uint256 tokenId);\n    event ERC1155Withdrawn(address indexed user, address indexed token, uint256 tokenId, uint256 amount);\n\n    constructor(address _roosterWallet, address _coq) {\n        if (_roosterWallet == address(0) || _coq == address(0)){\n            revert NoZeroAddress();\n        }\n\n        roosterWallet = _roosterWallet;\n        i_coq = _coq;\n    }\n\n    // Function to receive Avax. msg.data must be empty\n    receive() external payable {}\n\n    // Fallback function is called when msg.data is not empty\n    fallback() external payable {}\n\n    /////////////\n    /// ERC20 ///\n    /////////////\n    \n    function harvestERC20(address _token, uint256 _amount) external payable nonReentrant whenNotPaused{\n        if(isDeniedListedWallet(msg.sender) || isDeniedListedWallet(_token)){\n            revert Denied();\n        }\n\n        (bool success) = IERC20(i_coq).transferFrom(msg.sender, roosterWallet, serviceFee);\n        require(success, \"Failed to transfer ERC20 token to contract\");\n\n\n        (bool tokenharvested) = IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n        require(tokenharvested, \"Failed to transfer ERC20 token to contract\");\n\n        if(tokenPaymentAmount > IERC20(i_coq).balanceOf(address(this))){\n            revert ContractUnderFunded();\n        }\n        \n        (bool sent) = IERC20(i_coq).transfer(msg.sender, tokenPaymentAmount);\n        require(sent, \"Payment to customer failed\");\n\n        emit HarvestedERC20(msg.sender, _token, _amount);\n    }\n\n    function harvestMultipleERC20(address[] calldata _tokens, uint256[] calldata _amounts) external payable nonReentrant whenNotPaused{\n        if(isDeniedListedWallet(msg.sender)){\n            revert Denied();\n        }\n        if(_tokens.length != _amounts.length){\n            revert ArrayMismatchLengths();\n        }\n\n        for(uint256 i = 0; i < _tokens.length; ++i){\n            if(isDeniedListedWallet(_tokens[i])){\n                revert Denied();\n            }\n            (bool success) = IERC20(_tokens[i]).transferFrom(msg.sender, address(this), _amounts[i]);\n            require(success, \"Failed to transfer ERC20 token to contract\");\n\n        }\n\n        uint256 totalAmountToPayCustomer = tokenPaymentAmount * _tokens.length;\n        uint256 totalServiceFeeAmount = serviceFee * _tokens.length;\n\n        if(totalAmountToPayCustomer >= IERC20(i_coq).balanceOf(address(this))){\n            revert ContractUnderFunded();\n        }\n\n        if(totalServiceFeeAmount > IERC20(i_coq).balanceOf(msg.sender)){\n            revert UserNeedsMoreCoqInThem();\n        }\n\n        // Send service fee to our wallet\n        //@todo add gas limit -- def or maybe user transfer/send\n        (bool paid) = IERC20(i_coq).transferFrom(msg.sender, roosterWallet, totalServiceFeeAmount);\n        require(paid, \"Failed to transfer ERC20 token to contract\");\n\n        // Send amount back to user\n        //@todo add gas limit??\n        (bool sent) = IERC20(i_coq).transfer(msg.sender, totalAmountToPayCustomer);\n        require(sent, \"Payment to customer failed\");\n\n        emit HarvestedMultiERC20(msg.sender, _tokens, _amounts);\n    }\n\n    //////////////\n    /// ERC721 ///\n    //////////////\n\n    function harvestERC721(address _token, uint256 _tokenId) external payable nonReentrant whenNotPaused{\n        if(isDeniedListedWallet(msg.sender) || isDeniedListedWallet(_token)){\n            revert Denied();\n        }\n        \n        // Send service fee to our wallet\n        (bool success) = IERC20(i_coq).transferFrom(msg.sender, roosterWallet, serviceFee);\n        require(success, \"Failed to transfer ERC20 token to contract\");\n\n        // Transfer tokens to TaxLossHarvest contract\n        IERC721(_token).transferFrom(msg.sender, address(this), _tokenId);\n\n\n        if(tokenPaymentAmount >= IERC20(i_coq).balanceOf(address(this))){\n            revert ContractUnderFunded();\n        }\n        // Send amount back to user\n        (bool sent) = IERC20(i_coq).transfer(msg.sender, tokenPaymentAmount);\n        require(sent, \"Payment to customer failed\");\n\n        emit HarvestedERC721(msg.sender, _token, _tokenId);\n    }\n\n    function harvestMultipleERC721(address[] calldata _tokens, uint256[] calldata _tokenIds) external payable nonReentrant whenNotPaused{\n        if(isDeniedListedWallet(msg.sender)){\n            revert Denied();\n        }\n        if(_tokens.length != _tokenIds.length){\n            revert ArrayMismatchLengths();\n        }\n\n        for(uint256 i = 0; i < _tokens.length; ++i){    \n            if(isDeniedListedWallet(_tokens[i])){\n                revert Denied();\n            }  \n            // Transfer tokens to TaxLossHarvest contract\n            IERC721(_tokens[i]).safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\n        }\n\n        uint256 totalAmountToPayCustomer = tokenPaymentAmount * _tokens.length;\n        uint256 totalServiceFeeAmount = serviceFee * _tokens.length;\n\n       if(totalAmountToPayCustomer >= IERC20(i_coq).balanceOf(address(this))){\n            revert ContractUnderFunded();\n        }\n\n        if(totalServiceFeeAmount > IERC20(i_coq).balanceOf(msg.sender)){\n            revert UserNeedsMoreCoqInThem();\n        }\n\n        // Send service fee to our wallet\n        //@todo add gas limit -- def or maybe user transfer/send\n        (bool paid) = IERC20(i_coq).transferFrom(msg.sender, roosterWallet, totalServiceFeeAmount);\n        require(paid, \"Failed to transfer ERC20 token to contract\");\n\n        // Send amount back to user\n        //@todo add gas limit??\n        (bool sent) = IERC20(i_coq).transfer(msg.sender, totalAmountToPayCustomer);\n        require(sent, \"Payment to customer failed\");\n\n        emit HarvestedERC721s(msg.sender, _tokens, _tokenIds);\n        \n\n    }\n\n    ////////////////\n    /// ERC 1155 ///\n    ////////////////\n\n    function harvestERC1155(address _token, uint256 _tokenId, uint256 _amount) external payable nonReentrant whenNotPaused{\n        if(isDeniedListedWallet(msg.sender) || isDeniedListedWallet(_token)){\n            revert Denied();\n        }\n        \n        // Send service fee to our wallet\n        (bool success) = IERC20(i_coq).transferFrom(msg.sender, roosterWallet, serviceFee);\n        require(success, \"Failed to transfer ERC20 token to contract\");\n\n        // Transfer tokens to TaxLossHarvest contract\n        IERC1155(_token).safeTransferFrom(msg.sender, address(this), _tokenId, _amount, \"\");\n\n       if(tokenPaymentAmount >= IERC20(i_coq).balanceOf(address(this))){\n            revert ContractUnderFunded();\n        }\n        // Send amount back to user\n        (bool sent) = IERC20(i_coq).transfer(msg.sender, tokenPaymentAmount);\n        require(sent, \"Payment to customer failed\");\n\n        emit HarvestedERC1155(msg.sender, _token, _tokenId, _amount);\n    }\n\n    function harvestMultipleERC1155(address[] calldata _tokens, uint256[] calldata _tokenIds, uint256[] calldata _amounts) external payable nonReentrant whenNotPaused{\n        if(isDeniedListedWallet(msg.sender)){\n            revert Denied();\n        }\n\n        if(_tokens.length != _tokenIds.length && _tokenIds.length != _amounts.length){\n            revert ArrayMismatchLengths();\n        }\n\n        for(uint256 i = 0; i < _tokens.length; ++i){   \n            if(isDeniedListedWallet(_tokens[i])){\n                revert Denied();\n            }                 \n            // Transfer tokens to TaxLossHarvest contract\n            IERC1155(_tokens[i]).safeTransferFrom(msg.sender, address(this), _tokenIds[i], _amounts[i], \"\");\n        }\n\n        uint256 totalAmountToPayCustomer = tokenPaymentAmount * _tokens.length;\n        uint256 totalServiceFeeAmount = serviceFee * _tokens.length;\n\n        if(totalAmountToPayCustomer >= IERC20(i_coq).balanceOf(address(this))){\n            revert ContractUnderFunded();\n        }\n\n        if(totalServiceFeeAmount > IERC20(i_coq).balanceOf(msg.sender)){\n            revert UserNeedsMoreCoqInThem();\n        }\n\n        // Send service fee to our wallet\n        //@todo add gas limit -- def or maybe user transfer/send\n        (bool paid) = IERC20(i_coq).transferFrom(msg.sender, roosterWallet, totalServiceFeeAmount);\n        require(paid, \"Failed to transfer ERC20 token to contract\");\n\n        // Send amount back to user\n        //@todo add gas limit??\n        (bool sent) = IERC20(i_coq).transfer(msg.sender, totalAmountToPayCustomer);\n        require(sent, \"Payment to customer failed\");\n\n\n        emit HarvestedERC1155s(msg.sender, _tokens, _tokenIds, _amounts);\n    }\n\n\n\n    ////////////////////////////////\n    /// Withdraw Funcs For Owner ///\n    ////////////////////////////////\n\n    function withdrawAvax(address _to, uint256 _amount) external onlyOwner nonReentrant{\n        if (_to == address(0)){\n            revert NoZeroAddress();\n        }\n\n        if (_amount > address(this).balance){\n            revert InsufficientBalance(address(this).balance, _amount);\n        }\n        (bool sent, ) = _to.call{value: _amount}(\"\");\n        require(sent, \"Failed to send AVAXer\");\n\n        emit AVAXWithdrawn(_to, _amount);\n    }\n\n    function withdrawERC20Token(address _to, address _token, uint256 _amount) external onlyOwner nonReentrant{\n        if (_to == address(0)){\n            revert NoZeroAddress();\n        }\n        if (_amount > IERC20(_token).balanceOf(address(this))){\n            revert InsufficientBalance(IERC20(_token).balanceOf(address(this)), _amount);\n        }\n\n        (bool sent) = IERC20(_token).transfer(_to, _amount);\n        require(sent, \"Failed ERC20 Token Transfer\");\n\n        emit ERC20Withdrawn(_to, _token, _amount);\n    }\n\n    function withdrawERC721(address _to, address _token, uint256 _tokenId) external onlyOwner nonReentrant{\n        IERC721(_token).safeTransferFrom(address(this), _to, _tokenId);\n\n        emit ERC721Withdrawn(_to, _token, _tokenId);\n    }\n\n    function withdrawERC1155(address _to, address _token, uint256 _tokenId, uint256 _amount) external onlyOwner nonReentrant{\n        IERC1155(_token).safeTransferFrom(address(this), _to, _tokenId, _amount, \"\");\n\n        emit ERC1155Withdrawn(_to, _token, _tokenId, _amount);\n    }\n\n\n    ////////////////////////////\n    /// Edit State Variables ///\n    ////////////////////////////\n\n    function changeroosterWallet(address _newroosterWallet) external onlyOwner {\n        if (_newroosterWallet == address(0)){\n            revert NoZeroAddress();\n        }\n        address oldAddress = roosterWallet;\n        roosterWallet = _newroosterWallet;\n\n        emit roosterWalletChanged(oldAddress, _newroosterWallet);\n    }\n\n    function changeServiceFee(uint256 _newServiceFee) external onlyOwner {\n        if (_newServiceFee == 0){\n            revert CantBeZero(_newServiceFee);\n        }\n        uint256 oldServiceFee = serviceFee;\n        serviceFee = _newServiceFee;\n\n        emit ServiceFeeChanged(oldServiceFee, _newServiceFee);\n    }\n\n    function changeTokenPaymentAmount(uint256 _newTokenPaymentAmount) external onlyOwner {\n        if (_newTokenPaymentAmount == 0){\n            revert CantBeZero(_newTokenPaymentAmount);\n        }\n        uint256 oldTokenPaymentAmount = tokenPaymentAmount;\n        tokenPaymentAmount = _newTokenPaymentAmount;\n\n        emit TokenPaymentAmountChanged(oldTokenPaymentAmount, _newTokenPaymentAmount);\n    }   \n\n    function deny(address _address, bool _isDenied) external onlyOwner {\n        deniedList[_address] = _isDenied;\n    }\n\n\n    ///////////////////////\n    /// Admin Functions ///\n    ///////////////////////\n    function transferOwnership(address newOwner) public override onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        address oldOwner = owner();\n\n        if(newOwner == oldOwner){\n            revert SameOwner(oldOwner);\n        }\n\n        _transferOwnership(newOwner);\n\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _unpause();\n    }\n\n    //////////////////////////////\n    /// safeTransfer receivers ///\n    //////////////////////////////\n\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external pure returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    ///////////////////////////////\n    /// Getter & View Functions ///\n    ///////////////////////////////\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getroosterWalletAddress() public view returns (address) {\n        return roosterWallet;\n    }\n\n    function getCurrentServiceFee() public view returns(uint256) {\n        return serviceFee;\n    }\n\n    function getTokenPaymentAmount() public view returns(uint256){\n        return tokenPaymentAmount;\n    }\n\n    function isPaused() public view returns (bool) {\n        return paused();\n    }\n\n    function isDeniedListedWallet(address _address) public view returns (bool) {\n        return deniedList[_address];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}